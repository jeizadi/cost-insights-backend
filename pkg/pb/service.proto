syntax = "proto3";

package awscost;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";


option go_package = "github.com/seizadi/aws-cost/pkg/pb;pb";

// The AwsCost service, GetVersion RPC, and Version message
// make up a simple "starter" example. It allows the Atlas CLI to generate an
// end-to-end example for the sake of demonstration. Feel free to change 
// GetVersion to better-suit how your versioning system, or get rid of it entirely.

// Here are some helpful resources to aid you in your protobuf quest:
// https://github.com/infobloxopen/atlas-contacts-app/blob/master/proto/contacts.proto
// https://developers.google.com/protocol-buffers/docs/proto
// https://github.com/grpc-ecosystem/grpc-gateway
// https://developers.google.com/protocol-buffers/docs/style

// Happy protobuffing!

// TODO: Write a protobuf schema for the AwsCost service. The 
// messages and RPCs will compose the API for the service.

// TODO: Structure your own protobuf messages. Each protocol buffer message is a 
// small logical record of information, containing a series of name-value pairs.
message VersionResponse {
  string version = 1;
}

// TODO: Define the AwsCost service and its methods. Feel free
// to change the name of AwsCost to better-suit your naming
// conventions.
service AwsCost {
  rpc GetVersion (google.protobuf.Empty) returns (VersionResponse) {
    // TODO: Provide mappings between REST endpoints and service methods.
    option (google.api.http) = {
      get: "/version"
    };
  }

}

// export type CostInsightsApi = {
//   /**
//    * Get the most current date for which billing data is complete, in YYYY-MM-DD format. This helps
//    * define the intervals used in other API methods to avoid showing incomplete cost. The costs for
//    * today, for example, will not be complete. This ideally comes from the cloud provider.
//    */
//   getLastCompleteBillingDate(): Promise<string>;
//
//   /**
//    * Get a list of groups the given user belongs to. These may be LDAP groups or similar
//    * organizational groups. Cost Insights is designed to show costs based on group membership;
//    * if a user has multiple groups, they are able to switch between groups to see costs for each.
//    *
//    * This method should be removed once the Backstage identity plugin provides the same concept.
//    *
//    * @param userId The login id for the current user
//    */
//   getUserGroups(userId: string): Promise<Group[]>;
//
//   /**
//    * Get a list of cloud billing entities that belong to this group (projects in GCP, AWS has a
//    * similar concept in billing accounts). These act as filters for the displayed costs, users can
//    * choose whether they see all costs for a group, or those from a particular owned project.
//    *
//    * @param group The group id from getUserGroups or query parameters
//    */
//   getGroupProjects(group: string): Promise<Project[]>;
//
//   /**
//    * Get daily cost aggregations for a given group and interval time frame.
//    *
//    * The return type includes an array of daily cost aggregations as well as statistics about the
//    * change in cost over the intervals. Calculating these statistics requires us to bucket costs
//    * into two or more time periods, hence a repeating interval format rather than just a start and
//    * end date.
//    *
//    * The rate of change in this comparison allows teams to reason about their cost growth (or
//    * reduction) and compare it to metrics important to the business.
//    *
//    * @param group The group id from getUserGroups or query parameters
//    * @param intervals An ISO 8601 repeating interval string, such as R2/P30D/2020-09-01
//    *   https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals
//    */
//   getGroupDailyCost(group: string, intervals: string): Promise<Cost>;
//
//   /**
//    * Get daily cost aggregations for a given billing entity (project in GCP, AWS has a similar
//    * concept in billing accounts) and interval time frame.
//    *
//    * The return type includes an array of daily cost aggregations as well as statistics about the
//    * change in cost over the intervals. Calculating these statistics requires us to bucket costs
//    * into two or more time periods, hence a repeating interval format rather than just a start and
//    * end date.
//    *
//    * The rate of change in this comparison allows teams to reason about the project's cost growth
//    * (or reduction) and compare it to metrics important to the business.
//    *
//    * @param project The project id from getGroupProjects or query parameters
//    * @param intervals An ISO 8601 repeating interval string, such as R2/P30D/2020-09-01
//    *   https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals
//    */
//   getProjectDailyCost(project: string, intervals: string): Promise<Cost>;
//
//   /**
//    * Get aggregations for a particular metric and interval time frame. Teams
//    * can see metrics important to their business in comparison to the growth
//    * (or reduction) of a project or group's daily costs.
//    *
//    * @param metric A metric from the cost-insights configuration in app-config.yaml.
//    * @param intervals An ISO 8601 repeating interval string, such as R2/P30D/2020-09-01
//    *   https://en.wikipedia.org/wiki/ISO_8601#Repeating_intervals
//    */
//   getDailyMetricData(metric: string, intervals: string): Promise<MetricData>;
//
//   /**
//    * Get cost aggregations for a particular cloud product and interval time frame. This includes
//    * total cost for the product, as well as a breakdown of particular entities that incurred cost
//    * in this product. The type of entity depends on the product - it may be deployed services,
//    * storage buckets, managed database instances, etc.
//    *
//    * If project is supplied, this should only return product costs for the given billing entity
//    * (project in GCP).
//    *
//    * The time period is supplied as a Duration rather than intervals, since this is always expected
//    * to return data for two bucketed time period (e.g. month vs month, or quarter vs quarter).
//    *
//    * @param options Options to use when fetching insights for a particular cloud product and
//    *                interval time frame.
//    */
//   getProductInsights(options: ProductInsightsOptions): Promise<Entity>;
//
//   /**
//    * Get current cost alerts for a given group. These show up as Action Items for the group on the
//    * Cost Insights page. Alerts may include cost-saving recommendations, such as infrastructure
//    * migrations, or cost-related warnings, such as an unexpected billing anomaly.
//    */
//   getAlerts(group: string): Promise<Alert[]>;
// };

message LastCompleteBillingDateResponse {
  string date = 1;
}

message Group {
  string id = 1;
}

message UserGroupsRequest {
  string user_id = 1;
}

message UserGroupsResponse {
  repeated Group groups = 1;
}

message Project {
  string id = 1;
  string name = 2;
}

message GroupProjectsRequest {
  string group = 1;
}

message GroupProjectsResponse {
  repeated Project projects = 1;
}

message DateAggregation {
  string date = 1; // YYYY-MM-DD
  int32 amount = 2;
}

message ChangeStatistic {
  // The ratio of change from one duration to another, expressed as: (newSum - oldSum) / oldSum
  // If a ratio cannot be calculated - such as when a new or old sum is zero,
  // the ratio can be omitted and where applicable, ∞ or -∞ will display based on amount.
  float ratio = 1;
  // The actual USD change between time periods (can be negative if costs decreased)
  int32 amount = 2;
}
message Trendline {
  float slope = 1;
  float intercept = 2;
}

message ProductCost {
  string id = 1;
  repeated DateAggregation aggregation = 2;
}

message ProjectCost {
  string id = 1;
  repeated DateAggregation aggregation = 2;
}

message GroupedCosts {
  repeated ProductCost product = 1;
  repeated ProjectCost project = 2;
}

message GroupDailyCostRequest {
  string group = 1;
  string intervals = 2;
}

message GroupDailyCostResponse {
  string id = 1;
  string format = 2; // 'number' | 'currency'
  repeated DateAggregation aggregation = 3;
  ChangeStatistic change = 4;
  Trendline trendline = 5;
  GroupedCosts grouped_costs = 6;
}

message ProjectDailyCostRequest {
  string project = 1;
  string intervals = 2;
}

message ProjectDailyCostResponse {
  string id = 1;
  string format = 2; // 'number' | 'currency'
  repeated DateAggregation aggregation = 3;
  ChangeStatistic change = 4;
  Trendline trendline = 5;
  GroupedCosts grouped_costs = 6;
}

message DailyMetricDataRequest {
  string metric = 1;
  string intervals = 2;
}

message DailyMetricDataResponse {
  string id = 1;
  string format = 2; // 'number' | 'currency'
  repeated DateAggregation aggregation = 3;
  ChangeStatistic change = 4;
  Trendline trendline = 5;
}

message ProductInsightsRequest {
  // The product from the cost-insights configuration in app-config.yaml
  string product = 1;

  // The group id from getUserGroups or query parameters
  string group = 2;

  // An ISO 8601 repeating interval string, such as R2/P3M/2020-09-01
  string intervals = 3;

  // (optional) The project id from getGroupProjects or query parameters
  string project = 4;
}

message Record {
  repeated Entity event = 1;
  repeated Entity service = 2;
  repeated Entity deployment = 3;
  repeated Entity SKU = 4;
  repeated Entity bucket = 5;
  repeated Entity pipeline = 6;
  repeated Entity dataset = 7;
  repeated Entity product = 8;
}

// TODO - Eliminate camel-case paramters
message Entity {
  string id = 1;
  repeated int32 aggregation = 2;
  Record entities = 3;
  ChangeStatistic change = 4;
  string startDate = 5;
  string endDate = 6;
  string project = 7;
  string periodStart = 8;
  string periodEnd = 9;
  int32 labeledCost = 10;
  int32 unlabeledCost = 11;
  repeated Entity projects = 12;
  repeated Entity products = 13;
  repeated Entity services = 14;

}

message AlertRequest {
  string group = 1;
}

message AlertResponse {
  repeated Entity alerts = 1;
}

service CostInsightsApi {
  rpc GetLastCompleteBillingDate (google.protobuf.Empty) returns (LastCompleteBillingDateResponse) {
    option (google.api.http) = {
      get: "/last_complete_billing_date"
    };
  }

	rpc GetUserGroups (UserGroupsRequest) returns (UserGroupsResponse) {
	  option (google.api.http) = {
	    get: "/user_groups"
	  };
	}

  rpc GetGroupProjects (GroupProjectsRequest) returns (GroupProjectsResponse) {
    option (google.api.http) = {
      get: "/group_projects"
    };
  }

  rpc GetDailyMetricData (DailyMetricDataRequest) returns (DailyMetricDataResponse) {
    option (google.api.http) = {
      get: "/daily_metric_data"
    };
  }

  rpc GetGroupDailyCost (GroupDailyCostRequest) returns (GroupDailyCostResponse) {
    option (google.api.http) = {
      get: "/group_daily_cost"
    };
  }

  rpc GetProductInsights (ProductInsightsRequest) returns (Entity) {
    option (google.api.http) = {
      get: "/product_insights"
    };
  }

  rpc GetProjectDailyCost (ProjectDailyCostRequest) returns (ProjectDailyCostResponse) {
    option (google.api.http) = {
      get: "/project_daily_cost"
    };
  }

  rpc GetAlerts (AlertRequest) returns (AlertResponse) {
    option (google.api.http) = {
      get: "/alerts"
    };
  }
}



